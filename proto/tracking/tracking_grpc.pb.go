// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/tracking/tracking.proto

package tracking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrackingService_SendLocationStream_FullMethodName       = "/tracking.TrackingService/SendLocationStream"
	TrackingService_SubscribeLocationUpdates_FullMethodName = "/tracking.TrackingService/SubscribeLocationUpdates"
	TrackingService_TrackOrder_FullMethodName               = "/tracking.TrackingService/TrackOrder"
)

// TrackingServiceClient is the client API for TrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TrackingService provides real-time tracking and location updates.
type TrackingServiceClient interface {
	// Sends a stream of location updates for an order.
	SendLocationStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LocationRequest, LocationResponse], error)
	// Subscribes to location updates for a specific order.
	SubscribeLocationUpdates(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LocationResponse], error)
	// Retrieves the latest status of an order.
	TrackOrder(ctx context.Context, in *TrackOrderRequest, opts ...grpc.CallOption) (*TrackOrderResponse, error)
}

type trackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingServiceClient(cc grpc.ClientConnInterface) TrackingServiceClient {
	return &trackingServiceClient{cc}
}

func (c *trackingServiceClient) SendLocationStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LocationRequest, LocationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TrackingService_ServiceDesc.Streams[0], TrackingService_SendLocationStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LocationRequest, LocationResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TrackingService_SendLocationStreamClient = grpc.ClientStreamingClient[LocationRequest, LocationResponse]

func (c *trackingServiceClient) SubscribeLocationUpdates(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LocationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TrackingService_ServiceDesc.Streams[1], TrackingService_SubscribeLocationUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LocationRequest, LocationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TrackingService_SubscribeLocationUpdatesClient = grpc.ServerStreamingClient[LocationResponse]

func (c *trackingServiceClient) TrackOrder(ctx context.Context, in *TrackOrderRequest, opts ...grpc.CallOption) (*TrackOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackOrderResponse)
	err := c.cc.Invoke(ctx, TrackingService_TrackOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServiceServer is the server API for TrackingService service.
// All implementations must embed UnimplementedTrackingServiceServer
// for forward compatibility.
//
// TrackingService provides real-time tracking and location updates.
type TrackingServiceServer interface {
	// Sends a stream of location updates for an order.
	SendLocationStream(grpc.ClientStreamingServer[LocationRequest, LocationResponse]) error
	// Subscribes to location updates for a specific order.
	SubscribeLocationUpdates(*LocationRequest, grpc.ServerStreamingServer[LocationResponse]) error
	// Retrieves the latest status of an order.
	TrackOrder(context.Context, *TrackOrderRequest) (*TrackOrderResponse, error)
	mustEmbedUnimplementedTrackingServiceServer()
}

// UnimplementedTrackingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrackingServiceServer struct{}

func (UnimplementedTrackingServiceServer) SendLocationStream(grpc.ClientStreamingServer[LocationRequest, LocationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendLocationStream not implemented")
}
func (UnimplementedTrackingServiceServer) SubscribeLocationUpdates(*LocationRequest, grpc.ServerStreamingServer[LocationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLocationUpdates not implemented")
}
func (UnimplementedTrackingServiceServer) TrackOrder(context.Context, *TrackOrderRequest) (*TrackOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackOrder not implemented")
}
func (UnimplementedTrackingServiceServer) mustEmbedUnimplementedTrackingServiceServer() {}
func (UnimplementedTrackingServiceServer) testEmbeddedByValue()                         {}

// UnsafeTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingServiceServer will
// result in compilation errors.
type UnsafeTrackingServiceServer interface {
	mustEmbedUnimplementedTrackingServiceServer()
}

func RegisterTrackingServiceServer(s grpc.ServiceRegistrar, srv TrackingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrackingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrackingService_ServiceDesc, srv)
}

func _TrackingService_SendLocationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackingServiceServer).SendLocationStream(&grpc.GenericServerStream[LocationRequest, LocationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TrackingService_SendLocationStreamServer = grpc.ClientStreamingServer[LocationRequest, LocationResponse]

func _TrackingService_SubscribeLocationUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackingServiceServer).SubscribeLocationUpdates(m, &grpc.GenericServerStream[LocationRequest, LocationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TrackingService_SubscribeLocationUpdatesServer = grpc.ServerStreamingServer[LocationResponse]

func _TrackingService_TrackOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).TrackOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackingService_TrackOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).TrackOrder(ctx, req.(*TrackOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackingService_ServiceDesc is the grpc.ServiceDesc for TrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.TrackingService",
	HandlerType: (*TrackingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackOrder",
			Handler:    _TrackingService_TrackOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLocationStream",
			Handler:       _TrackingService_SendLocationStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeLocationUpdates",
			Handler:       _TrackingService_SubscribeLocationUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tracking/tracking.proto",
}
